Javascript is a Highlevel, (asking computer to allot memory but in JS &python js will only do)
prototype based,
object oriented,
multi paradigm,
interpreted or just in time compiled , ()
dynamic,
single threaded,
garbage collected, (js engine will remove garbage time to time)
non bloclking event loop concurrency model 
 


interpreted ->code will be converted to machine code and will be executed line by line(1 step)
compiation->code will be converted to machine code and written to a binary file that can be executed(2 steps)


Java script in just in time compiled as code will code converted and executed immediately
Javascript Engine has 2 things.Call stack(where our code will be executed by using Execution Context) and heap memory(where variables will be saved)

Javascript Engine does these things:
1.Parsing the code and creating a Abstract Syntax Tree 
2.Compiling this AST and compiles into Mahcine code
3.THis machine code will be executed immediately.

and we will get started with our application 
But modern Javascript Engines like (V8) will get started with fairly unoptimized code and then recompiles and re execute So 2&3 steps will be repeating


JavascriptRun time includes JS engine,Web APIS(like DOM,Fetch APi etc) and Call Back Queue(which is adding the functions into queue w.r.t user action like click etc)
This call back Queue will be sent into Call Stack and will be executed by Event loop.




Javascript Call Stack:

After comppliation js code will be executed in Call stack.
Then a Global Execution Context will be created for all the top level code to be executed means all the code which is oustide the functions,fuctions will be declared but not executed.
Execution Context is like a environemnt in which piece of Js will be executed.It contains all the info for the code to be executed.
There is only one Global Execution Context in full JS code
So once the top level code is finished function will be called for executed.
for each function one execution context will be created.
ALl the execution context make up the call stack
Some functions will wait for event to happen so that it can be executed.



What's inside Execution Context?
it stores all the variable enviornment,let,const,var,funcitons,arguments,refreneces of arguments to a function(Scope chain) &this keyword
these are generated in a phase called creation phase just before execution

Arrow functions will not have their this keyword and arguments object but they can use it from their nearest parent funciton(more later)


**************************************************
Hoisitng :Makes some types of variables accessible/usable in the code before they are actually declares."Variables lifted to the top of their scope"

Beofre execution of code,code is scanned for variable declarations and for each variable,a new property is created in the variable enviornment object.
is called Hoisitng.Hoisting works differently for diff types

for function declartions hoisted and initial value will be actual function.thats why we can can use functions eventhough they are not orderd in line because all functions will be declared before hand of execution
var hoisted and the inital value will be undefined and we will not get error but undefined if we try to access it before declaration
let and const are not hoisted technically yes they are hoisted but in practice no as they will be created in the Temporal dead zone to unitialized value and you will get error if you try to access  beofre the declaration



******************************************************
this 

inside a regular function call this key word will  be undefined
method this will be of the object

